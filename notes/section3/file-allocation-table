# File allocation table
- File system developed my microsoft
- A series of clusters that hold data, and a table that determines the state of a cluster
- Boot sector stores information about the filesystem

# Fat 16 filesystem
- Uses clusters to represent data abd subdirectories
- Each cluter uses a fixed amount of data which is specified in the boot sector
- Every file in fat16 uses at least 1 cluster to store its data. this is ineffecient and means a lot of storage is wasted
- Fat16 cant store files larger than 2gb without large file support. With large file support it can store files up to 4gb

# Fat16 disk layout
Name                | Size
Boot sector         | 512 bytes (total reserved sectors. Includes boot sector itsself)
Reserved sectors    | fat_sector.reserved_header * 512 
Fat1                | fat_headers.sectors_per_fat * 512 (info about which part of the disk is free/used)
fat2 (optional)     | fat_header.sectors_per_fat * 512 (duplicate/backup of fat1)
root directory      | fat_header.root_dir_entries * sizeof(struct fat_directory_item) rounded to next sector if needed
data clusters       | X


# More fat16 file allocation info!!!!!!
- each entry in the table is 2 bytes long and represents a cluter in the data cluster region that is taken or available
- Clusters can chain together. For example, a file that is larger than a cluster will take up 2 clusters.
  The value that represents the first cluster in the file allocation table, will contain the value (pointer to) of the next clutser
  The final cluster will contain a value of 0xffff signigying that there are no more clusters
- The size of a cluster is represented in the boot sector


# Fat16 root directory
- top most directory in the system
- Contains directory entries of a fixed size
  - struct holding information stuch as filename, attributes, creation time, creation date

# subdirectory entries
- any directory that is not the root direcotry
- Similar file structure to the root directory entry

# Iterate through directories
- Boot directory contaisn the max numvber of direcotry entrier
 - This numebr should noe be excceeded when iterating through the root directory
- We know we have finished iterating through the root directory or subdirectory because the first byte of the filename will be equal to zero
 - Basically  a null terminator in the file name section of the directory struct

 # Directory entry sttribute flags
 - 0x01 - read only
 - 0x02 - file hidden
 - 0x04 - system file, do not move the clusters
 - 0x08 - volume label
 - 0x10 - This is not a regular file, this is a subdirectory. If this is not set, this directory entry represents a regular file
 - 0x20 - archived
 - 0x40 - device
 - 0x80 - reserved, must not be changed by disk tools


 # fat16 filename and extension
 - filename is 8 bytes wide and unused bytes are padded with spaces, not null terminators
 - extension is 3 bytes wide, and also padded with spaces instead of null terminators
 - This is also why spaces are illegal in this file system

 # clusters
- a cluster represents a certian amount of sectors linearly next to each other
- the amount of sectors that fit in a cluster is stored in the boot sector
- the data cluters section in the filesystem contains all the cluters thta make up subdirectories and file data of files throughout the fat file system
